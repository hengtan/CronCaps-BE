name: 🚀 Release

on:
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  # 🏗️ Build and Package
  build:
    name: 🏗️ Build Release
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore

    - name: 🏗️ Build solution
      run: dotnet build --configuration Release --no-restore

    - name: 🧪 Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal

    - name: 📦 Publish API
      run: dotnet publish src/CronCaps.API/CronCaps.API.csproj --configuration Release --output ./publish/api --no-build

    - name: 📦 Publish Background Services
      run: dotnet publish src/CronCaps.BackgroundServices/CronCaps.BackgroundServices.csproj --configuration Release --output ./publish/worker --no-build

    - name: 📄 Upload API artifacts
      uses: actions/upload-artifact@v4
      with:
        name: croncaps-api
        path: ./publish/api

    - name: 📄 Upload Worker artifacts
      uses: actions/upload-artifact@v4
      with:
        name: croncaps-worker
        path: ./publish/worker

  # 🐳 Docker Release
  docker:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Extract tag version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/CronCaps.API/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/croncaps-api:latest
          ${{ secrets.DOCKER_USERNAME }}/croncaps-api:${{ steps.get_version.outputs.VERSION }}
        platforms: linux/amd64,linux/arm64

    - name: 🏗️ Build and push Worker Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/CronCaps.BackgroundServices/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/croncaps-worker:latest
          ${{ secrets.DOCKER_USERNAME }}/croncaps-worker:${{ steps.get_version.outputs.VERSION }}
        platforms: linux/amd64,linux/arm64

  # 🏷️ Create GitHub Release
  release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Extract tag version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: 📥 Download API artifacts
      uses: actions/download-artifact@v4
      with:
        name: croncaps-api
        path: ./release/api

    - name: 📥 Download Worker artifacts
      uses: actions/download-artifact@v4
      with:
        name: croncaps-worker
        path: ./release/worker

    - name: 📦 Create release archives
      run: |
        cd release
        tar -czf croncaps-api-v${{ steps.get_version.outputs.VERSION }}.tar.gz api/
        tar -czf croncaps-worker-v${{ steps.get_version.outputs.VERSION }}.tar.gz worker/
        ls -la *.tar.gz

    - name: 📝 Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## 🚀 CronCaps Backend v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🎯 What's New" >> $GITHUB_OUTPUT
        echo "- Enterprise-grade Cron Job Management System" >> $GITHUB_OUTPUT
        echo "- Clean Architecture with .NET 8" >> $GITHUB_OUTPUT
        echo "- PostgreSQL + MongoDB + Redis support" >> $GITHUB_OUTPUT
        echo "- Real-time monitoring with SignalR" >> $GITHUB_OUTPUT
        echo "- JWT Authentication & Role-based Authorization" >> $GITHUB_OUTPUT
        echo "- Comprehensive logging with Serilog" >> $GITHUB_OUTPUT
        echo "- Docker containerization ready" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🐳 Docker Images" >> $GITHUB_OUTPUT
        echo "- \`${{ secrets.DOCKER_USERNAME }}/croncaps-api:${{ steps.get_version.outputs.VERSION }}\`" >> $GITHUB_OUTPUT
        echo "- \`${{ secrets.DOCKER_USERNAME }}/croncaps-worker:${{ steps.get_version.outputs.VERSION }}\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 📦 Installation" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# Download and extract API" >> $GITHUB_OUTPUT
        echo "wget https://github.com/hengtan/CronCaps-BE/releases/download/v${{ steps.get_version.outputs.VERSION }}/croncaps-api-v${{ steps.get_version.outputs.VERSION }}.tar.gz" >> $GITHUB_OUTPUT
        echo "tar -xzf croncaps-api-v${{ steps.get_version.outputs.VERSION }}.tar.gz" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# Download and extract Worker" >> $GITHUB_OUTPUT
        echo "wget https://github.com/hengtan/CronCaps-BE/releases/download/v${{ steps.get_version.outputs.VERSION }}/croncaps-worker-v${{ steps.get_version.outputs.VERSION }}.tar.gz" >> $GITHUB_OUTPUT
        echo "tar -xzf croncaps-worker-v${{ steps.get_version.outputs.VERSION }}.tar.gz" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🐳 Docker Compose" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "docker-compose up -d" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🏷️ Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "🚀 CronCaps Backend v${{ steps.get_version.outputs.VERSION }}"
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        files: |
          release/croncaps-api-v${{ steps.get_version.outputs.VERSION }}.tar.gz
          release/croncaps-worker-v${{ steps.get_version.outputs.VERSION }}.tar.gz
        draft: false
        prerelease: false

  # 📋 Release Summary
  summary:
    name: 📋 Release Summary
    runs-on: ubuntu-latest
    needs: [build, docker, release]
    if: always()

    steps:
    - name: 🏷️ Extract tag version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: 📋 Release Summary
      run: |
        echo "## 🚀 CronCaps Backend Release v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏷️ Release | ${{ needs.release.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Release Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.build.result }}" == "success" && "${{ needs.docker.result }}" == "success" && "${{ needs.release.result }}" == "success" ]]; then
          echo "✅ **Release completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🐳 Docker images published:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_USERNAME }}/croncaps-api:${{ steps.get_version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_USERNAME }}/croncaps-worker:${{ steps.get_version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Release failed!** Please check the logs and try again." >> $GITHUB_STEP_SUMMARY
        fi