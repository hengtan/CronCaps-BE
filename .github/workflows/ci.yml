name: 🔧 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  # 🧪 Test Job
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: croncaps_test_password
          POSTGRES_USER: croncaps_test_user
          POSTGRES_DB: croncaps_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore

    - name: 🏗️ Build solution
      run: dotnet build --no-restore --configuration Release

    - name: 🧪 Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # 🔍 Code Quality Job
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore

    - name: 🔍 Run code analysis
      run: dotnet build --configuration Release --verbosity normal

    - name: 🧹 Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

  # 🐳 Docker Build Job
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/CronCaps.API/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/croncaps-api:latest
          ${{ secrets.DOCKER_USERNAME }}/croncaps-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push Worker Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/CronCaps.BackgroundServices/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/croncaps-worker:latest
          ${{ secrets.DOCKER_USERNAME }}/croncaps-worker:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy Job (only on main branch)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying CronCaps Backend to production..."
        echo "✅ Deployment completed successfully!"
        # Add your deployment scripts here
        # Example: kubectl apply -f k8s/
        # Example: docker-compose up -d

  # 📋 Summary Job
  summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [test, code-quality, docker]
    if: always()

    steps:
    - name: 📋 Pipeline Summary
      run: |
        echo "## 🔧 CronCaps Backend CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Docker Build | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY